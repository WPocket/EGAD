openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /rel/{index}/insertOne/{table}:
    post:
      tags:
      - relational-rest-index
      summary: "in the database with index {index}, insert asingle row into table\
        \ table"
      operationId: insertOne
      parameters:
      - name: index
        in: path
        description: the index of the database to make a request to
        required: true
        schema:
          type: integer
          format: int32
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
        required: true
      responses:
        "200":
          description: row inserted successfully
          content:
            '*/*':
              schema:
                type: object
        "304":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/{index}/insertMany/{table}:
    post:
      tags:
      - relational-rest-index
      summary: "in the database with index {index}, insert asingle row into table\
        \ table"
      operationId: insertMany
      parameters:
      - name: index
        in: path
        description: the index of the database to make a request to
        required: true
        schema:
          type: integer
          format: int32
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                additionalProperties:
                  type: string
        required: true
      responses:
        "304":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: rows inserted successfully
          content:
            '*/*':
              schema:
                type: object
  /rel/insertOne/{table}:
    post:
      tags:
      - relational-rest
      summary: insert a single row into table table
      operationId: insertOne_1
      parameters:
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
        required: true
      responses:
        "200":
          description: row inserted successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        "304":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/insertMany/{table}:
    post:
      tags:
      - relational-rest
      summary: insert a single row into table table
      operationId: insertMany_1
      parameters:
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                additionalProperties:
                  type: string
        required: true
      responses:
        "304":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: rows inserted successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /rel/{index}/select/{max}/table.{table}/columns.{columns}:
    get:
      tags:
      - relational-rest-index
      summary: "from database at index {index}, select from table table.{table}  the\
        \ value in multiple columns {columns}(comma separated) starting at the top,\
        \ select {max} rows"
      operationId: getMultipleMax
      parameters:
      - name: index
        in: path
        description: the index of the database to make a request to
        required: true
        schema:
          type: integer
          format: int32
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: columns
        in: path
        description: array of columns to get
        required: true
        schema:
          type: array
          items:
            type: string
      - name: max
        in: path
        description: max number of variables to get
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTable'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/{index}/select/{max}/table.{table}/columns.{columns}/where.{where}:
    get:
      tags:
      - relational-rest-index
      summary: "from database at index {index}, select from table table.{table}  the\
        \ value in multiple columns {columns}(comma separated) starting at the top,\
        \ with the sql option/s where.{where}, select {max} rows"
      operationId: getMultipleWhereMax
      parameters:
      - name: index
        in: path
        description: the index of the database to make a request to
        required: true
        schema:
          type: integer
          format: int32
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: columns
        in: path
        description: array of columns to get
        required: true
        schema:
          type: array
          items:
            type: string
      - name: where
        in: path
        description: "sql where condition \n ex: \"COLUMN = 0\""
        required: true
        schema:
          type: string
      - name: max
        in: path
        description: max number of variables to get
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTable'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/{index}/select/{max}/table.{table}/columns.{columns}/offset.{offset}:
    get:
      tags:
      - relational-rest-index
      summary: "from database at index {index}, select from table table.{table}  the\
        \ value in multiple columns {columns}(comma separated) in the row in position\
        \ offset {offset}, select {max} rows, if offset does not exist then it returns\
        \ nothing"
      operationId: getMultipleOffset
      parameters:
      - name: index
        in: path
        description: the index of the database to make a request to
        required: true
        schema:
          type: integer
          format: int32
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: columns
        in: path
        description: array of columns to get
        required: true
        schema:
          type: array
          items:
            type: string
      - name: offset
        in: path
        description: sql OFFSET
        required: true
        schema:
          type: string
      - name: max
        in: path
        description: max number of variables to get
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTable'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/{index}/select/{max}/table.{table}/columns.{columns}/offset.{offset}/where.{where}:
    get:
      tags:
      - relational-rest-index
      summary: "from database at index {index}, select from table table.{table}  the\
        \ value in multiple columns {columns}(comma separated) in the row in position\
        \ offset {offset} with the sql option/s where.{where}, select {max} rows,\
        \ if offset does not exist then it returns nothing"
      operationId: getMultipleWhereOffset
      parameters:
      - name: index
        in: path
        description: the index of the database to make a request to
        required: true
        schema:
          type: integer
          format: int32
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: columns
        in: path
        description: array of columns to get
        required: true
        schema:
          type: array
          items:
            type: string
      - name: offset
        in: path
        description: sql OFFSET
        required: true
        schema:
          type: string
      - name: where
        in: path
        description: "sql where condition \n ex: \"COLUMN = 0\""
        required: true
        schema:
          type: string
      - name: max
        in: path
        description: max number of variables to get
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /rel/{index}/select/{max}/table.{table}/column.{column}:
    get:
      tags:
      - relational-rest-index
      summary: "from database at index {index}, select from table table.{table} the\
        \ value in column {column} in starting at the top, select {max} rows"
      operationId: getKeyMax
      parameters:
      - name: index
        in: path
        description: the index of the database to make a request to
        required: true
        schema:
          type: integer
          format: int32
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: column
        in: path
        description: column name
        required: true
        schema:
          type: string
      - name: max
        in: path
        description: max number of variables to get
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListString'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/{index}/select/{max}/table.{table}/column.{column}/where.{where}:
    get:
      tags:
      - relational-rest-index
      summary: "from database at index {index}, select from table table.{table} the\
        \ value in column {column} starting at the top with the sql option/s where.{where},\
        \ select {max} rows"
      operationId: getKeyWhereMax
      parameters:
      - name: index
        in: path
        description: the index of the database to make a request to
        required: true
        schema:
          type: integer
          format: int32
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: column
        in: path
        description: column name
        required: true
        schema:
          type: string
      - name: where
        in: path
        description: "sql where condition \n ex: \"COLUMN = 0\""
        required: true
        schema:
          type: string
      - name: max
        in: path
        description: max number of variables to get
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListString'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/{index}/select/{max}/table.{table}/column.{column}/offset.{offset}:
    get:
      tags:
      - relational-rest-index
      summary: "from database at index {index}, select from table table.{table} the\
        \ value in column {column} in the row in position offset {offset}, select\
        \ {max} rows, if offset does not exist then it returns nothing"
      operationId: getKeyOffsetMax
      parameters:
      - name: index
        in: path
        description: the index of the database to make a request to
        required: true
        schema:
          type: integer
          format: int32
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: column
        in: path
        description: column name
        required: true
        schema:
          type: string
      - name: offset
        in: path
        description: sql OFFSET
        required: true
        schema:
          type: string
      - name: max
        in: path
        description: max number of variables to get
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListString'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/{index}/select/{max}/table.{table}/column.{column}/offset.{offset}/where.where.{where}:
    get:
      tags:
      - relational-rest-index
      summary: "from database at index {index}, select from table table.{table} the\
        \ value in column {column} in the row in position offset {offset} with the\
        \ sql option/s where.{where}, select {max} rows, if offset does not exist\
        \ then it returns nothing"
      operationId: getKeyOffsetWhereMax
      parameters:
      - name: index
        in: path
        description: the index of the database to make a request to
        required: true
        schema:
          type: integer
          format: int32
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: column
        in: path
        description: column name
        required: true
        schema:
          type: string
      - name: offset
        in: path
        description: sql OFFSET
        required: true
        schema:
          type: string
      - name: where
        in: path
        description: "sql where condition \n ex: \"COLUMN = 0\""
        required: true
        schema:
          type: string
      - name: max
        in: path
        description: max number of variables to get
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListString'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/{index}/select/table.{table}/columns.{columns}:
    get:
      tags:
      - relational-rest-index
      summary: "from database at index {index}, select from table table.{table} the\
        \ value in multiple columns {columns}(comma separated)"
      operationId: getMultiple
      parameters:
      - name: index
        in: path
        description: the index of the database to make a request to
        required: true
        schema:
          type: integer
          format: int32
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: columns
        in: path
        description: array of columns to get
        required: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/{index}/select/table.{table}/columns.{columns}/where.{where}:
    get:
      tags:
      - relational-rest-index
      summary: "from database at index {index}, select from table table.{table} the\
        \ value in multiple columns {columns}(comma separated)with the sql option/s\
        \ where.{where}"
      operationId: getMultipleWhere
      parameters:
      - name: index
        in: path
        description: the index of the database to make a request to
        required: true
        schema:
          type: integer
          format: int32
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: columns
        in: path
        description: array of columns to get
        required: true
        schema:
          type: array
          items:
            type: string
      - name: where
        in: path
        description: "sql where condition \n ex: \"COLUMN = 0\""
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/{index}/select/table.{table}/columns.{columns}/offset.{offset}:
    get:
      tags:
      - relational-rest-index
      summary: "from database at index {index}, select from table table.{table} the\
        \ value in multiple columns {columns}(comma separated) in the row in position\
        \ offset, if offset does not exist then it returns nothing"
      operationId: getMultipleOffset_1
      parameters:
      - name: index
        in: path
        description: the index of the database to make a request to
        required: true
        schema:
          type: integer
          format: int32
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: columns
        in: path
        description: array of columns to get
        required: true
        schema:
          type: array
          items:
            type: string
      - name: offset
        in: path
        description: sql OFFSET
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/{index}/select/table.{table}/columns.{columns}/offset.{offset}/where.{where}:
    get:
      tags:
      - relational-rest-index
      summary: "from database at index {index}, select from table table.{table} the\
        \ value in multiple columns {columns}(comma separated) in the row in position\
        \ offset {offset} with the sql option/s where.{where}, if offset does not\
        \ exist then it returns nothing"
      operationId: getMultipleWhereOffset_1
      parameters:
      - name: index
        in: path
        description: the index of the database to make a request to
        required: true
        schema:
          type: integer
          format: int32
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: columns
        in: path
        description: array of columns to get
        required: true
        schema:
          type: array
          items:
            type: string
      - name: offset
        in: path
        description: sql OFFSET
        required: true
        schema:
          type: string
      - name: where
        in: path
        description: "sql where condition \n ex: \"COLUMN = 0\""
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/{index}/select/table.{table}/column.{column}:
    get:
      tags:
      - relational-rest-index
      summary: "from database at index {index}, select from table table.{table} the\
        \ value in column column.{column} in the first row"
      operationId: getKey
      parameters:
      - name: index
        in: path
        description: the index of the database to make a request to
        required: true
        schema:
          type: integer
          format: int32
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: column
        in: path
        description: column name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringData'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/{index}/select/table.{table}/column.{column}/where.{where}:
    get:
      tags:
      - relational-rest-index
      summary: "from database at index {index}, select from table table.{table} the\
        \ value in column column.{column} in the first row with the sql option/s where.{where}"
      operationId: getKeyWhere
      parameters:
      - name: index
        in: path
        description: the index of the database to make a request to
        required: true
        schema:
          type: integer
          format: int32
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: column
        in: path
        description: column name
        required: true
        schema:
          type: string
      - name: where
        in: path
        description: "sql where condition \n ex: \"COLUMN = 0\""
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringData'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/{index}/select/table.{table}/column.{column}/offset.{offset}:
    get:
      tags:
      - relational-rest-index
      summary: "from database at index {index}, select from table table.{table} the\
        \ value in column column.{column} in the row in position offset, if offset\
        \ does not exist then it returns nothing "
      operationId: getKeyOffset
      parameters:
      - name: index
        in: path
        description: the index of the database to make a request to
        required: true
        schema:
          type: integer
          format: int32
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: column
        in: path
        description: column name
        required: true
        schema:
          type: string
      - name: offset
        in: path
        description: sql OFFSET
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringData'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/{index}/select/table.{table}/column.{column}/offset.{offset}/where.{where}:
    get:
      tags:
      - relational-rest-index
      summary: "from database at index {index}, select from table table.{table} the\
        \ value in column column.{column} in the row in position offset {offset} with\
        \ the sql option/s where.{where}, if offset does not exist then it returns\
        \ nothing"
      operationId: getKeyOffsetWhere
      parameters:
      - name: index
        in: path
        description: the index of the database to make a request to
        required: true
        schema:
          type: integer
          format: int32
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: column
        in: path
        description: column name
        required: true
        schema:
          type: string
      - name: offset
        in: path
        description: sql OFFSET
        required: true
        schema:
          type: string
      - name: where
        in: path
        description: "sql where condition \n ex: \"COLUMN = 0\""
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringData'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/select/{max}/table.{table}/columns.{columns}:
    get:
      tags:
      - relational-rest
      summary: "select from table table.{table}  the value in multiple columns {columns}(comma\
        \ separated) starting at the top, select {max} rows"
      operationId: getMultipleMax_1
      parameters:
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: columns
        in: path
        description: array of columns to get
        required: true
        schema:
          type: array
          items:
            type: string
      - name: max
        in: path
        description: max number of variables to get
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List2DTable'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/select/{max}/table.{table}/columns.{columns}/where.{where}:
    get:
      tags:
      - relational-rest
      summary: "select from table table.{table}  the value in multiple columns {columns}(comma\
        \ separated) starting at the top, with the sql option/s where.{where}, select\
        \ {max} rows"
      operationId: getMultipleWhere_1
      parameters:
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: columns
        in: path
        description: array of columns to get
        required: true
        schema:
          type: array
          items:
            type: string
      - name: where
        in: path
        description: "sql where condition \n ex: \"COLUMN = 0\""
        required: true
        schema:
          type: string
      - name: max
        in: path
        description: max number of variables to get
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List2DTable'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/select/{max}/table.{table}/columns.{columns}/offset.{offset}:
    get:
      tags:
      - relational-rest
      summary: "select from table table.{table}  the value in multiple columns {columns}(comma\
        \ separated) in the row in position offset {offset}, select {max} rows, if\
        \ offset does not exist then it returns nothing"
      operationId: getMultipleOffset_2
      parameters:
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: columns
        in: path
        description: array of columns to get
        required: true
        schema:
          type: array
          items:
            type: string
      - name: offset
        in: path
        description: sql OFFSET
        required: true
        schema:
          type: string
      - name: max
        in: path
        description: max number of variables to get
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List2DTable'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/select/{max}/table.{table}/columns.{columns}/offset.{offset}/where.{where}:
    get:
      tags:
      - relational-rest
      summary: "select from table table.{table}  the value in multiple columns {columns}(comma\
        \ separated) in the row in position offset {offset} with the sql option/s\
        \ where.{where}, select {max} rows, if offset does not exist then it returns\
        \ nothing"
      operationId: getMultipleWhereOffset_2
      parameters:
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: columns
        in: path
        description: array of columns to get
        required: true
        schema:
          type: array
          items:
            type: string
      - name: offset
        in: path
        description: sql OFFSET
        required: true
        schema:
          type: string
      - name: where
        in: path
        description: "sql where condition \n ex: \"COLUMN = 0\""
        required: true
        schema:
          type: string
      - name: max
        in: path
        description: max number of variables to get
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /rel/select/{max}/table.{table}/column.{column}:
    get:
      tags:
      - relational-rest
      summary: "select from table table.{table} the value in column {column} in starting\
        \ at the top, select {max} rows"
      operationId: getKeyMax_1
      parameters:
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: column
        in: path
        description: column name
        required: true
        schema:
          type: string
      - name: max
        in: path
        description: max number of variables to get
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List2D'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/select/{max}/table.{table}/column.{column}/where.{where}:
    get:
      tags:
      - relational-rest
      summary: "select from table table.{table} the value in column {column} starting\
        \ at the top with the sql option/s where.{where}, select {max} rows"
      operationId: getKeyWhereMax_1
      parameters:
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: column
        in: path
        description: column name
        required: true
        schema:
          type: string
      - name: where
        in: path
        description: "sql where condition \n ex: \"COLUMN = 0\""
        required: true
        schema:
          type: string
      - name: max
        in: path
        description: max number of variables to get
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List2D'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/select/{max}/table.{table}/column.{column}/offset.{offset}:
    get:
      tags:
      - relational-rest
      summary: "select from table table.{table} the value in column {column} in the\
        \ row in position offset {offset}, select {max} rows, if offset does not exist\
        \ then it returns nothing"
      operationId: getKeyOffsetMax_1
      parameters:
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: column
        in: path
        description: column name
        required: true
        schema:
          type: string
      - name: offset
        in: path
        description: sql OFFSET
        required: true
        schema:
          type: string
      - name: max
        in: path
        description: max number of variables to get
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List2D'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/select/{max}/table.{table}/column.{column}/offset.{offset}/where.{where}:
    get:
      tags:
      - relational-rest
      summary: "select from table table.{table} the value in column {column} in the\
        \ row in position offset {offset} with the sql option/s where.{where}, select\
        \ {max} rows, if offset does not exist then it returns nothing"
      operationId: getKeyOffsetWhereMax_1
      parameters:
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: column
        in: path
        description: column name
        required: true
        schema:
          type: string
      - name: offset
        in: path
        description: sql OFFSET
        required: true
        schema:
          type: string
      - name: where
        in: path
        description: "sql where condition \n ex: \"COLUMN = 0\""
        required: true
        schema:
          type: string
      - name: max
        in: path
        description: max number of variables to get
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List2D'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/select/table.{table}/columns.{columns}:
    get:
      tags:
      - relational-rest
      summary: "select from table table.{table} the value in multiple columns {columns}(comma\
        \ separated)"
      operationId: getMultiple_1
      parameters:
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: columns
        in: path
        description: array of columns to get
        required: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTable'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/select/table.{table}/columns.{columns}/where.{where}:
    get:
      tags:
      - relational-rest
      summary: "select from table table.{table} the value in multiple columns {columns}(comma\
        \ separated)with the sql option/s where.{where}"
      operationId: getMultipleWhere_2
      parameters:
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: columns
        in: path
        description: array of columns to get
        required: true
        schema:
          type: array
          items:
            type: string
      - name: where
        in: path
        description: "sql where condition \n ex: \"COLUMN = 0\""
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTable'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/select/table.{table}/columns.{columns}/offset.{offset}:
    get:
      tags:
      - relational-rest
      summary: "select from table table.{table} the value in multiple columns {columns}(comma\
        \ separated) in the row in position offset, if offset does not exist then\
        \ it returns nothing"
      operationId: getMultipleOffset_3
      parameters:
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: columns
        in: path
        description: array of columns to get
        required: true
        schema:
          type: array
          items:
            type: string
      - name: offset
        in: path
        description: sql OFFSET
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTable'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/select/table.{table}/columns.{columns}/offset.{offset}/where.{where}:
    get:
      tags:
      - relational-rest
      summary: "select from table table.{table} the value in multiple columns {columns}(comma\
        \ separated) in the row in position offset {offset} with the sql option/s\
        \ where.{where}, if offset does not exist then it returns nothing"
      operationId: getMultipleWhereOffset_3
      parameters:
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: columns
        in: path
        description: array of columns to get
        required: true
        schema:
          type: array
          items:
            type: string
      - name: offset
        in: path
        description: sql OFFSET
        required: true
        schema:
          type: string
      - name: where
        in: path
        description: "sql where condition \n ex: \"COLUMN = 0\""
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTable'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/select/table.{table}/column.{column}:
    get:
      tags:
      - relational-rest
      summary: "select from table table.{table} the value in column column.{column}\
        \ in the first row"
      operationId: getKey_1
      parameters:
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: column
        in: path
        description: column name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListString'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/select/table.{table}/column.{column}/where.{where}:
    get:
      tags:
      - relational-rest
      summary: "select from table table.{table} the value in column column.{column}\
        \ in the first row with the sql option/s where.{where}"
      operationId: getKeyWhere_1
      parameters:
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: column
        in: path
        description: column name
        required: true
        schema:
          type: string
      - name: where
        in: path
        description: "sql where condition \n ex: \"COLUMN = 0\""
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListString'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/select/table.{table}/column.{column}/offset.{offset}:
    get:
      tags:
      - relational-rest
      summary: "select from table table.{table} the value in column column.{column}\
        \ in the row in position offset, if offset does not exist then it returns\
        \ nothing "
      operationId: getKeyOffset_1
      parameters:
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: column
        in: path
        description: column name
        required: true
        schema:
          type: string
      - name: offset
        in: path
        description: sql OFFSET
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListString'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rel/select/table.{table}/column.{column}/offset.{offset}/where.{where}:
    get:
      tags:
      - relational-rest
      summary: "select from table table.{table} the value in column column.{column}\
        \ in the row in position offset {offset} with the sql option/s where.{where},\
        \ if offset does not exist then it returns nothing"
      operationId: getKeyOffsetWhere_1
      parameters:
      - name: table
        in: path
        description: sql table name
        required: true
        schema:
          type: string
      - name: column
        in: path
        description: column name
        required: true
        schema:
          type: string
      - name: offset
        in: path
        description: sql OFFSET
        required: true
        schema:
          type: string
      - name: where
        in: path
        description: "sql where condition \n ex: \"COLUMN = 0\""
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "table, value, and row exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListString'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /kv/{index}/type/key.{key}:
    get:
      tags:
      - kv-rest-index
      summary: "get the type of key {key} from database in index {index}"
      operationId: getType
      parameters:
      - name: index
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringData'
        "304":
          description: nothing changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /kv/{index}/setex/key.{key}/value.{value}/t.{time}:
    get:
      tags:
      - kv-rest-index
      summary: "Set key {key} to hold the string value {value} and set key to timeout\
        \ after a given number of seconds {t}"
      operationId: setEx
      parameters:
      - name: index
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: value
        in: path
        required: true
        schema:
          type: string
      - name: time
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /kv/{index}/set/key.{key}/value.{value}:
    get:
      tags:
      - kv-rest-index
      summary: "Set key {key} to have value {value}"
      operationId: setKey
      parameters:
      - name: index
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: value
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /kv/{index}/incrby/key.{key}/incr.{incr}:
    get:
      tags:
      - kv-rest-index
      summary: "in the key value database in the index {index}, increment key {key}\
        \ by increment amount {inc}"
      operationId: incr
      parameters:
      - name: index
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: incr
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongData'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /kv/{index}/incr/key.{key}:
    get:
      tags:
      - kv-rest-index
      summary: "in the key value database in the index {index}, increment key {key}\
        \ by 1"
      operationId: incr_1
      parameters:
      - name: index
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongData'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /kv/{index}/getMul/key.{key}:
    get:
      tags:
      - kv-rest-index
      summary: "get multiple keys {key} (comma separated list) from database in index\
        \ {index}"
      operationId: getMultiple_2
      parameters:
      - name: index
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: array
          items:
            type: string
      responses:
        "404":
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "304":
          description: nothing changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
  /kv/{index}/get/key.{key}:
    get:
      tags:
      - kv-rest-index
      summary: "get key {key}"
      operationId: getKey_2
      parameters:
      - name: index
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringData'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /kv/{index}/expire/key.{key}/t.{time}:
    get:
      tags:
      - kv-rest-index
      summary: "Set key {key} to timeout after a given number of seconds {t}"
      operationId: expire
      parameters:
      - name: index
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: time
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /kv/{index}/exists/key.{key}:
    get:
      tags:
      - kv-rest-index
      summary: "in the key value database in the index {index}, increment key {key}\
        \ by 1"
      operationId: exists
      parameters:
      - name: index
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoolData'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /kv/{index}/del/key.{key}:
    get:
      tags:
      - kv-rest-index
      summary: "delete key {key} in database with index {index}"
      operationId: del
      parameters:
      - name: index
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "304":
          description: nothing changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /kv/{index}/addMul/key.{key}/value.{value}:
    get:
      tags:
      - kv-rest-index
      summary: "add multiple keys {key} (comma separated list) with values {value}\
        \ (comma separated list) to database in position {index}"
      operationId: addMul
      parameters:
      - name: index
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: array
          items:
            type: string
      - name: value
        in: path
        required: true
        schema:
          type: array
          items:
            type: string
      responses:
        "404":
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "304":
          description: nothing changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /kv/type/key.{key}:
    get:
      tags:
      - kv-rest
      summary: "get the type of key {key} from all databases"
      operationId: getType_1
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "304":
          description: nothing changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListString'
  /kv/setex/key.{key}/value.{value}/t.{time}:
    get:
      tags:
      - kv-rest
      summary: "Set key {key} to hold the string value {value} and set key to timeout\
        \ after a given number of seconds {t} in every database"
      operationId: setEx_1
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: value
        in: path
        required: true
        schema:
          type: string
      - name: time
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /kv/set/key.{key}/value.{value}:
    get:
      tags:
      - kv-rest
      summary: "set key {key} to value {value} in every database"
      operationId: setKey_1
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: value
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /kv/incrby/key.{key}/incr.{incr}:
    get:
      tags:
      - kv-rest
      summary: "increment key {key} by increment amount {inc} in all databases"
      operationId: incr_2
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: incr
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLong'
        "304":
          description: nothing changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /kv/incr/key.{key}:
    get:
      tags:
      - kv-rest
      summary: "increment key {key} in all databases"
      operationId: incr_3
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLong'
        "304":
          description: nothing changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /kv/getMul/key.{key}:
    get:
      tags:
      - kv-rest
      summary: "get multiple keys {key} (comma separated list) from all databases"
      operationId: getMultiple_3
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: array
          items:
            type: string
      responses:
        "404":
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTable'
        "304":
          description: nothing changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /kv/get/key.{key}:
    get:
      tags:
      - kv-rest
      summary: "get key {key} from every database"
      operationId: getKey_3
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListString'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /kv/expire/key.{key}/t.{time}:
    get:
      tags:
      - kv-rest
      summary: "set key {key} to expire after time {t} seconds in every database"
      operationId: expire_1
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: time
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /kv/exists/key.{key}:
    get:
      tags:
      - kv-rest
      summary: "does key {key} exist in every database"
      operationId: exists_1
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBool'
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /kv/del/key.{key}:
    get:
      tags:
      - kv-rest
      summary: "delete key {key} in all databases"
      operationId: del_1
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "304":
          description: nothing changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /kv/addMul/key.{key}/value.{value}:
    get:
      tags:
      - kv-rest
      summary: "add multiple keys {key} (comma separated list) with values {value}\
        \ (comma separated list) to all databases"
      operationId: addMul_1
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: array
          items:
            type: string
      - name: value
        in: path
        required: true
        schema:
          type: array
          items:
            type: string
      responses:
        "404":
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "304":
          description: nothing changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /greeting:
    get:
      tags:
      - greeting-controller
      operationId: greeting
      parameters:
      - name: name
        in: query
        required: false
        schema:
          type: string
          default: World
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Greeting'
components:
  schemas:
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        rc:
          type: string
          enum:
          - OK
          - CREATED
          - ACCEPTED
          - NO_CONTENT
          - NOT_MODIFIED
          - BAD_REQUEST
          - UNAUTHORIZED
          - FORBIDDEN
          - NOT_FOUND
          - TOO_MANY_REQUESTS
          - SERVICE_UNAVAILABLE
        message:
          type: string
        responseCode:
          type: string
          enum:
          - OK
          - CREATED
          - ACCEPTED
          - NO_CONTENT
          - NOT_MODIFIED
          - BAD_REQUEST
          - UNAUTHORIZED
          - FORBIDDEN
          - NOT_FOUND
          - TOO_MANY_REQUESTS
          - SERVICE_UNAVAILABLE
    ListTable:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            additionalProperties:
              type: string
    ListString:
      type: object
      properties:
        data:
          type: array
          items:
            type: string
    Table:
      type: object
      properties:
        data:
          type: object
          additionalProperties:
            type: string
    StringData:
      type: object
      properties:
        data:
          type: string
    List2DTable:
      type: object
      properties:
        data:
          type: array
          items:
            type: array
            items:
              type: object
              additionalProperties:
                type: string
    List2D:
      type: object
      properties:
        data:
          type: array
          items:
            type: array
            items:
              type: string
    LongData:
      type: object
      properties:
        data:
          type: integer
          format: int64
    BoolData:
      type: object
      properties:
        data:
          type: boolean
    ListLong:
      type: object
      properties:
        data:
          type: array
          items:
            type: integer
            format: int64
    ListBool:
      type: object
      properties:
        data:
          type: array
          items:
            type: boolean
    Greeting:
      type: object
      properties:
        id:
          type: integer
          format: int64
        content:
          type: string
